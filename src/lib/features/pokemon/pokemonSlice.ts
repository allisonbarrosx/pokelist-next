import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import {
  PokemonType,
  PokemonTypeResult,
  TypeListPokemons,
} from "./pokemon.model";

// Define a service using a base URL and expected endpoints
export const pokemonApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://pokeapi.co/api/v2/" }),
  reducerPath: "pokemonApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["TypesList", "PokemonsByType"],
  endpoints: (builder) => ({
    // Supply the return type and the expected param type
    getPokemonTypes: builder.query<PokemonType[], void>({
      query: () => "type", // baseApiUrl/type
      // transform the response, since what comes from the API is not what we need to return
      transformResponse: (response: PokemonTypeResult) => response.results,
      // create tags according to the pokemon types name
      providesTags: (transformedResult) => {
        return transformedResult
          ? [
              ...transformedResult.map(({ name }) => ({
                type: "TypesList" as const,
                id: name,
              })),
              { type: "TypesList", id: "LIST" },
            ]
          : [{ type: "TypesList", id: "LIST" }];
      },
    }),
    getPokemonByType: builder.query<TypeListPokemons, string>({
      query: (type: string) => `type/${type}`,
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `pokemonSlice.endpoints.getPokemonTypes.useQuery`
export const { useGetPokemonTypesQuery, useGetPokemonByTypeQuery } =
  pokemonApiSlice;
