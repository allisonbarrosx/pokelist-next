import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import {
  PokemonCompleteInfo,
  PokemonType,
  PokemonTypeResult,
  TypeListPokemons,
} from "./pokemon.model";

// Define a service using a base URL and expected endpoints
export const pokemonApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://pokeapi.co/api/v2/" }),
  reducerPath: "pokemonApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["TypesList", "PokemonsByType"],
  endpoints: (builder) => ({
    // Supply the return type and the expected param type
    getPokemonTypes: builder.query<PokemonType[], void>({
      query: () => "type", // baseApiUrl/type
      // transform the response, since what comes from the API is not what we need to return
      transformResponse: (response: PokemonTypeResult) => response.results,
      // create tags according to the pokemon types name
      providesTags: (transformedResult) => {
        return transformedResult
          ? [
              ...transformedResult.map(({ name }) => ({
                type: "TypesList" as const,
                id: name,
              })),
              { type: "TypesList", id: "LIST" },
            ]
          : [{ type: "TypesList", id: "LIST" }];
      },
    }),
    getPokemonByType: builder.query<PokemonCompleteInfo[], string>({
      async queryFn(type, _queryApi, _extraOptions, baseQuery) {
        const allPokemonsByTypeList = await baseQuery(`type/${type}`);
        if (allPokemonsByTypeList.error)
          return { error: allPokemonsByTypeList.error };

        const pokemons = (allPokemonsByTypeList.data as TypeListPokemons)
          .pokemon;

        const BATCH_SIZE = 5;
        const results: PokemonCompleteInfo[] = [];

        for (let i = 0; i < pokemons.length; i += BATCH_SIZE) {
          const batch = pokemons.slice(i, i + BATCH_SIZE);

          const batchResults = await Promise.all(
            batch.map(async ({ pokemon }) => {
              const res = await baseQuery(`pokemon/${pokemon.name}`);
              if (res.error) return null;
              return { ...(res.data as PokemonCompleteInfo), type };
            })
          );

          results.push(
            ...(batchResults.filter(Boolean) as PokemonCompleteInfo[])
          );

          await new Promise((r) => setTimeout(r, 1));
        }

        return { data: results };
      },
      providesTags: (result) =>
        result
          ? [
              ...result.map(({ id }) => ({
                type: "PokemonsByType" as const,
                id,
              })),
            ]
          : ["PokemonsByType"],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `pokemonSlice.endpoints.getPokemonTypes.useQuery`
export const { useGetPokemonTypesQuery, useGetPokemonByTypeQuery } =
  pokemonApiSlice;

/**
 * this is an example of managing API calls with RTK Query
 */
